docker exec -it configsvr1 mongosh

rs.initiate({
  _id: "rs-config",
  configsvr: true,
  members: [
    { _id: 0, host: "configsvr1:27017" },
    { _id: 1, host: "configsvr2:27017" },
    { _id: 2, host: "configsvr3:27017" }
  ]
})

rs.initiate({
  _id: "rs-shard1",
  members: [
    { _id: 0, host: "shard1a:27017" },
    { _id: 1, host: "shard1b:27017" },
    { _id: 2, host: "shard1c:27017" }
  ]
})

rs.initiate({
  _id: "rs-shard2",
  members: [
    { _id: 0, host: "shard2a:27017" },
    { _id: 1, host: "shard2b:27017" },
    { _id: 2, host: "shard2c:27017" }
  ]
})

sh.addShard("rs-shard1/shard1a:27017")
sh.addShard("rs-shard2/shard2a:27017")

sh.enableSharding("restaurante")
use restaurante
db.cliente_natural.createIndex({ sede: 1 })
sh.shardCollection("restaurante.cliente_natural", { sede: 1 })


sh.splitFind("restaurante.cliente_natural", { sede: "Ate" })
sh.splitFind("restaurante.cliente_natural", { sede: "La Molina" })

sh.moveChunk(
   "restaurante.cliente_natural",
   { sede: MinKey() },
   "rs-shard1"
)

db.adminCommand({ cleanupOrphaned: "restaurante.cliente_natural" })

for (let i = 0; i < 10; i++) {
  let sede
  if (i % 2 === 0)
    sede = 'Ate'
  else
    sede = 'Molina'
  
  db.cliente_natural.insert({
    name: "Cliente generico " + i,
    sede: sede
  })
}